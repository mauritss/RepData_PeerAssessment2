swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mudf")
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
exit()
exit
play
rm(list=ls())
library(swirl)
swirl()
mydf <- read.csv("path2csv.csv", stringsAsFactors = FALSE)
mydf <- read.csv("path2csv", stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
haed(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,
| r_arch:country)
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == 'swirl')
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2" & country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran2, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran,avg_bytes = mean(size))
rm(list=ls())
DF <- data.frame(x = c("A","A","B","B","C"), y = c(4, 5, 8, 5, 7), z = c(2, 2, 4, 3, 5))
DF
library(dplyr)
DT <- as.tribble(DF)
DT <- tribble(DF)
DT <- tbl_df(DF)
DT
summarise(DT, y, mean())
summarise(DT, mean(y))
summarise(DT, mean(z))
summarise(DT, mean(c(y, z)))
summarise(DT, mean(y), mean(z)))
summarise(DT, mean(y), mean(z))
DF
select(DT, x)
filter(DT, x=="A")
rename(DT, x="v")
rename(DT, x=="v")
rename(DT, "x"="v")
rename(DT, x=v)
rename(DT, x->v)
rename(DT, x=v)
?rename
mutate(DT, x=v)
mutate(DT, v=x)
DT <- select(DT, x, y, z)
DT
arrange(DT, desc(x))
arrange(DT, desc(x), y)
arrange(DT, desc(x), y, z)
df_url <- "sat = http://research.collegeboard.org/programs/sat/data/cb-seniors-2013"
rm(df_url)
?gather
library("tidyr", lib.loc="~/R/win-library/3.5")
?gather
library(swirl)
rm(list=ls())
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
source('C:/Users/Maurits/AppData/Local/Temp/RtmpwTEUyN/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, desc(count))
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sortedi)
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
rm(list=ls())
library(swirl)
swirl()
library(tidyr)
student
students
?gather
gather(student, sex, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
seperate(res, sex_class, c("sex","class"))
separate(res, sex_class, c("sex","class"))
submit()
students3
submit()
submit()
reset()
swirl()
info()
students3
submit()
info()
skip()
?spread
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
students4
submit()
submit()
submit()
failed
passed
failed
passed <- mutate(passed, status = "passesd")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
bind_rows(passed, failed)
sat
submit()
submit()
rm(list=ls())
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
today()
quit()
DTmerged <- data.frame(means=c(1,2,3), stdd=c(2,3,0), group=("one","two","one"))
DTmerged <- data.frame(means=c(1,2,3), stdd=c(2,3,0), group=c("one","two","one"))
## Step 7: Extracts measurements on mean std for each measurement with dplyr
library(dplyr)
DTmerged <- data.table(means=c(1,2,3), stdd=c(2,3,0), group=c("one","two","one"))
library(data.table)
DTmerged <- data.table(means=c(1,2,3), stdd=c(2,3,0), group=c("one","two","one"))
a <- select(DTmerged, with(DTmerged, grepl("[mM]ean") | grepl("[sS]td")))
a <- select(DTmerged,(matches("[mM]ean")))
DTsubset <- select(DTmerged, grep("[mM]ean"), group)
a <- cbind(select(DTmerged,(matches("[mM]ean"))),select(DTmerged,(matches("[sS]td"))))
a <- cbind(select(DTmerged,(matches("[mM]ean"))),select(DTmerged,(matches("[sS]td"))), select(DTmerged,(matches("group"))))
rm(a, DTmerged)
library(swirl)
swirl()
cmat
points(cx, cy, col = c("red","orange","purple"), pch = 3, cex = 2, lwd = 2
)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
point(x, y, pch = 19, cex = 2, col = col1[newClust2])
points(x, y, pch = 19, cex = 2, col = col1[newClust2])
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter ## returns number of iterations
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black","red","green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
scale(mat)
svd(scale(mat))
scale(mat)
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd[,1:2]
svd2[,1:2]
svd2[1:2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% svd1$v
Type a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a1 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- scale(sub1[,-c(562,563)])
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12],maxCon))
mdist <- dist(c("sub1[,10:12]","maxCon"))
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,1:561], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,1:561], centers = 6, nstart = 100)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- kClust$size==29
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1)
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12], pch = 19, ylab = "Walkdown Cluster")
rm(list=ls())
time<-format(Sys.time(), "%a %b %d %X XY")
rand <- rnorm(1)
install.packages("xtable")
rm(list=ls())
setwd("C:/Users/Maurits/test-repo/RepData_PeerAssessment2")
# Create data folder
if (!file.exists("data")) {
dir.create("data")
}
# Downloading Raw Data
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
"./data/rawData.zip")
dataDownloaded <- data()
View(dataDownloaded)
dataDownloaded[1]
dataDownloaded[2]
dataDownloaded[3]
dataDownloaded <- date()
print(dataDownloaded)
?unzip
unzip("./data/rawData.zip")
unzip("./data/rawData.bz2")
read.csv("./data/rawData.bz2")
?read.csv
rawData = read.csv("./data/rawData.bz2", sep = ";", nrows = 5)
View(rawData)
rawData = read.csv("./data/rawData.bz2", sep = ",", nrows = 5)
View(rawData)
str(rawData)
rawData = read.csv("./data/rawData.bz2", sep = ",", nrows = 50)
str(rawData)
View(rawData)
rawData = read.csv("./data/rawData.bz2", sep = ",", na.strings = NA, nrows = 50)
rawData = read.csv("./data/rawData.bz2", sep = ",", na.strings = NA)
str(rawData)
unique(rawData$STATE__)
unique(rawData$BGN_DATE)
unique(rawData$BGN_TIME)
unique(rawData$TIME_ZONE)
unique(rawData$COUNTY)
unique(rawData$COUNTYNAME)
unique(rawData$STATE)
unique(rawData$EVTYPE)
unique(rawData$BGN_RANGE)
str(rawData)
?complete.cases
complete.cases(rawData)
sum(complete.cases(rawData))
View(rawData)
sum(complete.cases(rawData$COUNTY_END))
sum(complete.cases(rawData$END_LOCATI))
colnames(rawData) = tolower(colnames(rawData))
library(dplyr)
colnames(rawData) = colnames(rawData) %>% gsub("-", "", .)
colnames(rawData) = colnames(rawData) %>% gsub("-", "")
?gsub
rawData = read.csv("./data/rawData.bz2", sep = ",", na.strings = NA)
colnames(rawData) %>% gsub("_", "", .)
colnames(rawData) = tolower(colnames(rawData))
colnames(rawData) = colnames(rawData) %>% gsub("_", "", .)
head(as.Date(rawData$bgndate))
View(rawData)
?as.Date
head(as.Date(rawData$bgndate, format = "%m/%d/%Y"))
rawData$bgndate = as.Date(rawData$bgndate, format = "%m/%d/%Y")
head(as.Date(rawData$bgntime, format = "%H%M"))
head(as.Date(rawData$bgntime, format = "%H%M%S"))
head(as.Date(rawData$bgntime, format = "%H%M"))
head(as.Date(rawData$bgntime, format = "%H:%M"))
head(rawData$bgntime)
head(as.Date(rawData$bgntime, format = "%R"))
head(as.Date(rawData$bgntime, format = "%H%M"))
head(as.Date(rawData$bgntime, format = "%H%M%S"))
head(as.Date(rawData$bgntime, format = "%h%M%S"))
head(as.Date(rawData$bgntime, format = "%h%M"))
head(as.Date(rawData$bgntime, format = "h:m:s"))
head(as.Date(rawData$bgntime, format = "hms"))
head(hms(rawData$bgntime))
library(lubridate)
head(hms(rawData$bgntime))
head(hm(rawData$bgntime))
head(hms(as.character(rawData$bgntime)))
head(hm(as.character(rawData$bgntime)))
head(as.character(rawData$bgntime))
head(hm((as.character(rawData$bgntime))))
head(hm(as.character(rawData$bgntime)))
head(ms(as.character(rawData$bgntime)))
head(hms(as.character(rawData$bgntime)))
head(rawData$bgntime, 20)
head(as.character(rawData$bgntime), 20)
head(hm(as.character(rawData$bgntime), 20))
head(hms(as.character(rawData$bgntime), 20))
head(hm(as.numeric(rawData$bgntime), 20))
head(as.Date(rawData$bgntime, format = "HHSS"))
head(as.Date(rawData$bgntime, format = "HH:SS"))
head(as.Date(rawData$bgntime, format = "hh:ss"))
head(as.Date(rawData$bgntime, format = "%h%s"))
head(as.Date(rawData$bgntime, format = "%h:%s"))
head(as.Date(rawData$bgntime, format = "%H:%M"))
rawData$state
unique(rawData$state)
unique(rawData$timezone)
unique(rawData$county)
unique(rawData$countyname)
rawData$countyname = as.character(rawData$countyname)
unique(rawData$state)
names(rawData$state)
levels(rawData$state)
labels(rawData$state)
unique(rawData$bgnazi)
unique(rawData$bgnlocati)
)
rawData$bgnlocati = as.character(rawData$bgnlocati)
head(rawData$bgnlocati, 100)
unique(rawData$bgnlocati)
unique(rawData$enddate, 5)
unique(rawData$enddate)
rawData$enddate = as.Date(rawData$enddate, format = "%m/%d/%Y")
unique(rawData$enddate)
unique(rawData$county)
unique(rawData$countyend)
unique(rawData$countyendn)
unique(rawData$endrange)
unique(rawData$endazi)
unique(rawData$endlocati)
rawData$endlocati = as.character(rawData$endlocati)
unique(rawData$f)
unique(rawData$mag)
unique(rawData$fatalities)
unique(rawData$injuries)
unique(rawData$propdmgexp)
rawData$zonenames = as.character(rawData$zonenames)
rawData$remarks = as.character(rawData$remarks)
test = head(rawData$bgntime, 5)
test
hms(test)
hm(test)
hm(as.character(test))
as.Date(as.character(test), format = "hhmm")
as.Date(as.character(test), format = "hh:mm")
test
as.Date(as.character(test[1]), format = "hh:mm")
as.Date(as.character(test[1]), format = "hhmm")
as.Date(as.character(test[1]), format = "%h%m")
as.Date(as.character(test[1]), format = "%h%M")
as.Date(as.character(test[1]), format = "%H%M")
test[1]
as.character(test[1])
hms("0130")
hms("01:30")
hms("01:30:00")
hm("01:30")
hm("0130")
hm("01:30")
as.Date("01:30")
as.Date("01:30", format = "%H%M")
as.Date("01:30", format = "%H%m")
as.Date("01:30", format = "%H:%m")
as.Date("01:30", format = "%H:%M")
as.Date("01:30", format = "hh:mm")
sub1Data = rawData %>%
filter(bgndate > "1996-01-01")
sub1Data = rawData %>%
filter(bgndate > as.Data("1996-01-01"))
sub1Data = rawData %>%
filter(bgndate >= as.Data("1996-01-01"))
rawData = tbl_df(rawData)
tbl_df(rawData)
sub1Data = rawData
rm(sub1Data)
library(data.table)
tbl_df(rawData)
test <- data.table(rawData)
tables(test)
sub1Data = test %>%
filter(bgndate >= as.Data("1996-01-01"))
names(rawData)
unique(names(rawData))
names(rawData)[7]
names(rawData)[7] = "state2"
names(rawData)
unique(names(rawData))
names(rawData)[35] = "longitude2"
names(rawData)
unique(names(rawData))
sub1Data = rawData %>%
filter(bgndate >= as.Data("1996-01-01"))
sub1Data = rawData %>%
filter(bgndate >= ("1996-01-01"))
rm(test)
sub1Data = sub1Data %>%
select(state, bgndate, county, state2, evtype, bgnrange, bgnazi, enddate,
endrange, endazi, length, width, f, mag, fatalities, injuries,
propdmg, propdmgexp, cropdmg, cropdmgexp, wfo, stateoffic, refnum)
rm(rawData)
tables(sub1Data)
data.table(sub1Data)
sub1Data <- data.table(sub1Data)
tables(sub1Data)
tables()
sub1Data = data.table(sub1Data)
unqiue(evtype)
unqiue(sub1Data$evtype)
unique(sub1Data$evtype)
